/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/Database/structure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    connectionName?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TableInfoDto"][];
                        "application/json": components["schemas"]["TableInfoDto"][];
                        "text/json": components["schemas"]["TableInfoDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Database/tableStructure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    connectionName?: string;
                    schema?: string;
                    table?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TableInfoDto"];
                        "application/json": components["schemas"]["TableInfoDto"];
                        "text/json": components["schemas"]["TableInfoDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Database/GetMergeSql": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: {
                    connectionName?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ItemDataDto"];
                    "text/json": components["schemas"]["ItemDataDto"];
                    "application/*+json": components["schemas"]["ItemDataDto"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["MergeSqlResponse"];
                        "application/json": components["schemas"]["MergeSqlResponse"];
                        "text/json": components["schemas"]["MergeSqlResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Database/tablePaginationRecords": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    connectionName?: string;
                    schema?: string;
                    table?: string;
                    page?: number;
                    perPage?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["StringStringDictionaryPagedResult"];
                        "application/json": components["schemas"]["StringStringDictionaryPagedResult"];
                        "text/json": components["schemas"]["StringStringDictionaryPagedResult"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Database/tableRecord": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    connectionName?: string;
                    schema?: string;
                    table?: string;
                    recordId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": {
                            [key: string]: string;
                        };
                        "application/json": {
                            [key: string]: string;
                        };
                        "text/json": {
                            [key: string]: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Database/connection/{connectionName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    connectionName: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": string;
                    "text/json": string;
                    "application/*+json": string;
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Database/connections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ConnectionDto"][];
                        "application/json": components["schemas"]["ConnectionDto"][];
                        "text/json": components["schemas"]["ConnectionDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Database/columnConfig/{connectionName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    connectionName: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CustomColumnInfoDto"][];
                    "text/json": components["schemas"]["CustomColumnInfoDto"][];
                    "application/*+json": components["schemas"]["CustomColumnInfoDto"][];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ColumnInfoDto: {
            schema?: string | null;
            table?: string | null;
            /** Format: int32 */
            columnId?: number;
            columnName?: string | null;
            dataType?: components["schemas"]["DataTypeEnum"];
            dbType?: string | null;
            defaultValue?: string | null;
            isNullable?: boolean;
            isIdentity?: boolean;
            isPK?: boolean;
            isFK?: boolean;
            isUK?: boolean;
            isExtension?: boolean;
            isCustom?: boolean;
            schemaFK?: string | null;
            tableFK?: string | null;
        };
        ConnectionDto: {
            connectionName?: string | null;
            connectionString?: string | null;
        };
        CustomColumnInfoDto: {
            connectionName?: string | null;
            schema?: string | null;
            table?: string | null;
            columnName?: string | null;
            dbType?: string | null;
            defaultValue?: string | null;
            isNullable?: boolean | null;
            isIdentity?: boolean | null;
            isPK?: boolean | null;
            isFK?: boolean | null;
            isUK?: boolean | null;
            isExtension?: boolean | null;
            schemaFK?: string | null;
            tableFK?: string | null;
        };
        /** @enum {string} */
        DataTypeEnum: "Undefined" | "String" | "Char" | "Integer" | "Decimal" | "Float" | "Boolean" | "DateTime" | "DateTimeOffset" | "TimeOnly" | "Binary" | "Json" | "Xml" | "Guid";
        ItemDataDto: {
            isEdition?: boolean;
            schema?: string | null;
            table?: string | null;
            parentColumn?: string | null;
            columns?: {
                [key: string]: string | null;
            } | null;
            dependencies?: components["schemas"]["ItemDataDto"][] | null;
        };
        MergeSqlResponse: {
            originalSql?: string | null;
            newSql?: string | null;
            diffSql?: string | null;
        };
        StringStringDictionaryPagedResult: {
            items?: {
                [key: string]: string;
            }[] | null;
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            perPage?: number;
            /** Format: int32 */
            readonly totalPages?: number;
        };
        TableInfoDto: {
            schema?: string | null;
            table?: string | null;
            isExtension?: boolean;
            identityColumn?: string | null;
            identifierColumns?: string[] | null;
            updateableColumns?: string[] | null;
            insertableColumns?: string[] | null;
            columns?: components["schemas"]["ColumnInfoDto"][] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
